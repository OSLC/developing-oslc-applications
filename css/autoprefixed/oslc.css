.copy > p, .copy > table, .copy > .fluid-video, .copy > ul,
.copy > ol {
  margin-bottom: 1em;
  margin-top: 0; }

/*
 * The ever-important clearfix
 */
.cf {
  *zoom: 1; }
  .cf:before, .cf:after {
    content: " ";
    display: table; }
  .cf:after {
    clear: both; }

/*
 * Floats
 */
.left {
  float: left; }

.right {
  float: right; }

/*
 * Positioning
 */
.pos-rel {
  position: relative; }

.pos-abs {
  position: absolute; }

/*
 * Reset UL/OLs
 */
.menu .items {
  margin: 0;
  padding: 0;
  list-style: none; }

/*
 * Prevent flicker on transitions on mobile webkit
 */
.prevent-flicker {
  -webkit-backface-visibility: hidden; }

/*
 * Text size mixins / placeholders
 */
.copy > h6 {
  font-size: 16px;
  font-size: 1rem; }

.copy > h5 {
  font-size: 19px;
  font-size: 1.1875rem; }

abbr.oslc-name, .copy > h4 {
  font-size: 23px;
  font-size: 1.4375rem; }

.card > .header > .title, .copy > h3 {
  font-size: 27px;
  font-size: 1.6875rem; }

.copy > h2 {
  font-size: 32px;
  font-size: 2rem; }

.copy > h1 {
  font-size: 38px;
  font-size: 2.375rem; }

.copy > .godzilla {
  font-size: 48px;
  font-size: 3rem; }

/**
 * Define the ranges
 * Borrowed the idea shamelessly from http://foundation.zurb.com/docs/media-queries.html
 * Modified with some different terms
 */
/**
 * Set up some Media Queries
 */
/**
 * Mixin for bubbling up media queries
 * Syntax sugar for the MQs defined above
 * 
 * See:
 *  - http://css-tricks.com/media-queries-sass-3-2-and-codekit/
 *  - http://jeffcroft.com/blog/2012/mar/02/implementing-responsive-design/
 */
.js .nojs-only,
.mustard .nomustard-only {
  display: none !important; }

.no-js .js-only,
.no-js .mustard-only,
.no-mustard .mustard-only {
  display: none !important; }

.image-link {
  text-decoration: none; }
  .image-link > img {
    display: block; }

/*** 
  * Fluid video/embed wrappers
  * 
  * adapted from http://www.netmagazine.com/tutorials/create-fluid-width-videos
  * and http://alistapart.com/article/creating-intrinsic-ratios-for-videol
  */
.fluid-video {
  position: relative;
  height: 0;
  padding-bottom: 56.25%;
  padding-top: 25px; }
  .fluid-video > iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100% !important;
    height: 100% !important; }

/*
 * Modified version of Normalize.css
 * by Nicolas Gallagher, co-created with Jonathan Neal.
 * http://necolas.github.io/normalize.css/
 */
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * (1) Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
  /* 1 */ }

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 * Hide the `datalist` element
 */
[hidden],
template,
datalist {
  display: none; }

/**
 * Add pointer cursor to `summary` element
 */
summary {
  cursor: pointer; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif. Uses Bourbon's Helvetica stack
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography oddities
   ========================================================================== */
/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Allow lines inside pre/code elements to wrap
 * www.pathf.com/blogs/2008/05/formatting-quoted-code-in-blog-posts-css21-white-space-pre-wrap/
 * https://developer.mozilla.org/en-US/docs/Web/CSS/white-space
 */
pre, code {
  word-wrap: break-word;
  white-space: pre-wrap; }

/**
 * If for some reason <code> blocks don't wrap, allow overflow
 */
pre {
  overflow: auto; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Pointer for labels with a for="" attribute
 */
label[for] {
  cursor: pointer; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/* ==========================================================================
   RWD
   ========================================================================== */
img, object, embed, iframe {
  max-width: 100% !important; }

img {
  -ms-interpolation-mode: bicubic;
  height: auto !important; }

/* ==========================================================================
   GRID SYSTEM
   
   Flexbox grid with an inline-block fallback
   Columns are equal-width and have gutter spacing (no lines) by default
   
   For current flexbox support see:
     - http://philipwalton.github.io/solved-by-flexbox/
     - http://caniuse.com/flexbox
   
   As of this writing, you've got 
     - IE 11
     - Chrome
     - Safari / iOS
     - Opera
     - FF 22+ (with .flexboxlegacy)
     - IE10 (has a weird "tweener" syntax)
   
   Requires: 
    - inline-block from Bourbon library
    - flexbox helper
    - rem helper ( @include rem(property, px-value|s); )
   ========================================================================== */
.grid {
  font-family: FreeSans, Arimo, "Droid Sans", Helvetica, Arial, sans-serif;
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  /* 
   * This is the best way I've found to allow infinite nesting 
   * with easy gutters.
   *
   * The advantages are:
   *  - you easily achieve classic grid proportions (all cells equal size)
   *    with simple math
   *  - nested .grid rows line up with no extra work
   *  - gutters between columns with no extra markup (this drove me nuts on OSLC v2)
   * 
   * The drawbacks are twofold:
   *  - negative margins are aggressively weird
   *  - b/c of negative margins you cannot apply a background color to the .grid object
   *    or cells directly
   */
  margin-left: -16px;
  margin-left: -1rem;
  margin-right: -16px;
  margin-right: -1rem;
  /* 
   * Double gutters
   */
  /* 
   * For when the gutters get too weird to deal with
   * This will remove all negative margins and gutters
   * 
   * To keep this reasonable, you'll need to also put .collapsed
   * on any nested .grid objects
   */ }
  .flexbox .grid {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap; }
  .grid.relaxed {
    margin-left: -32px;
    margin-left: -2rem;
    margin-right: -32px;
    margin-right: -2rem; }
  .grid.collapsed {
    margin-left: 0;
    margin-right: 0; }
  .grid.test p {
    margin: 0;
    background-color: pink; }
  .grid.test.blocks > .column > div {
    background-color: #ccc;
    padding: 5px; }

.column {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  letter-spacing: normal;
  word-spacing: normal;
  display: inline-block;
  vertical-align: baseline;
  zoom: 1;
  *display: inline;
  *vertical-align: auto;
  vertical-align: top;
  /* 
   * if you do nothing else this handles everything for you like magic!
   * ... (for flexbox, at least)
   * 
   * all items will be equal proportion in the same row (1:1 size)
   * just keep adding to your heart's content.
   * 
   * obviously that's not how it'll work out for the inline-block fallback
   */
  padding-left: 16px;
  padding-left: 1rem;
  padding-right: 16px;
  padding-right: 1rem;
  /**
  * Blocks
  * Extra bonus for flexbox browsers
  * Set display: flex and columns will auto-grow in height to match each other
  */
  /**
   * Grid dividers
   */ }
  .flexbox .column {
    -webkit-box-flex: 1;
    -webkit-flex: 1;
    -ms-flex: 1;
    flex: 1; }
  .relaxed > .column {
    padding-left: 32px;
    padding-left: 2rem;
    padding-right: 32px;
    padding-right: 2rem; }
  .collapsed > .column {
    padding-left: 0;
    padding-right: 0; }
  .flexbox .blocks > .column {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex; }
    .flexbox .blocks > .column > * {
      width: 100%; }
  .divided > .column {
    border-right: 1px solid #333333; }
  .divided > .column:last-child {
    border-right: 0; }

/*
 * "Hand" classes
 * We're "mobile first" so these are phone-up
 */
.hand-1 {
  width: 8.33333%; }
  .flexbox .hand-1 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 8.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 8.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 8.33333%; }

.hand-2 {
  width: 16.66667%; }
  .flexbox .hand-2 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 16.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 16.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 16.66667%; }

.hand-3 {
  width: 25%; }
  .flexbox .hand-3 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 25%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 25%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 25%; }

.hand-4 {
  width: 33.33333%; }
  .flexbox .hand-4 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 33.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 33.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 33.33333%; }

.hand-5 {
  width: 41.66667%; }
  .flexbox .hand-5 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 41.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 41.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 41.66667%; }

.hand-6 {
  width: 50%; }
  .flexbox .hand-6 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 50%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 50%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 50%; }

.hand-7 {
  width: 58.33333%; }
  .flexbox .hand-7 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 58.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 58.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 58.33333%; }

.hand-8 {
  width: 66.66667%; }
  .flexbox .hand-8 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 66.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 66.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 66.66667%; }

.hand-9 {
  width: 75%; }
  .flexbox .hand-9 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 75%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 75%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 75%; }

.hand-10 {
  width: 83.33333%; }
  .flexbox .hand-10 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 83.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 83.33333%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 83.33333%; }

.hand-11 {
  width: 91.66667%; }
  .flexbox .hand-11 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 91.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 91.66667%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 91.66667%; }

.hand-12 {
  width: 100%; }
  .flexbox .hand-12 {
    width: auto;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-box-flex: 0;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -webkit-flex: 0 0 100%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    -ms-flex: 0 0 100%;
    /**
     * see: 
     *   - http://philipwalton.github.io/solved-by-flexbox/demos/grids/
     *   - http://www.w3.org/TR/css3-flexbox/#flex
     *   - https://github.com/zeMirco/flexbox-grid
     * 
     * flex shorthand (flex-grow, flex-shrink, flex-basis):
     *   - grow: 0 means it won't grow if there's free space
     *   - shrink: 0 means it won't shrink to fit in a row
     *   - basis: defines (starting) width of the element (takes a standard width value)
    **/
    flex: 0 0 100%; }

@media only screen and (max-width: 40em) {
  .knee-up,
  .knee-only,
  .desk-up,
  .desk-only,
  .workstation-up,
  .workstation-only,
  .neckbeard-up,
  .neckbeard-only {
    display: none !important; } }
.no-js .knee-up,
.no-js .knee-only,
.no-js .desk-up,
.no-js .desk-only,
.no-js .workstation-up,
.no-js .workstation-only,
.no-js .neckbeard-up,
.no-js .neckbeard-only, .no-mustard .knee-up,
.no-mustard .knee-only,
.no-mustard .desk-up,
.no-mustard .desk-only,
.no-mustard .workstation-up,
.no-mustard .workstation-only,
.no-mustard .neckbeard-up,
.no-mustard .neckbeard-only {
  display: none !important; }

/**
 * OOCSS Media and Module groups 
 */
.body, .media, .no-display-table .flag {
  overflow: hidden;
  *overflow: visible;
  zoom: 1; }

.media .image, .no-display-table .flag .image {
  float: left; }
.media .image img, .no-display-table .flag .image img {
  display: block; }
.media.reversed .image, .no-display-table .reversed.flag .image {
  float: right; }

.flag {
  display: table;
  width: 100%; }
  .flag > .image,
  .flag > .body {
    display: table-cell;
    vertical-align: middle; }
  .flag > .image {
    width: 0; }
  .flag > .body {
    width: 100%; }
  .flag > .image img {
    display: block; }
  .flag.bottom > .image,
  .flag.bottom > .body {
    vertical-align: bottom; }

.flexbox .body,
.flexbox .media,
.flexbox .no-display-table .flag,
.no-display-table .flexbox .flag {
  overflow: visible; }
.flexbox .media, .flexbox .no-display-table .flag, .no-display-table .flexbox .flag, .flexbox .flag {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }
  .flexbox .media > .image, .flexbox .no-display-table .flag > .image, .no-display-table .flexbox .flag > .image,
  .flexbox .media > .body,
  .flexbox .no-display-table .flag > .body,
  .no-display-table .flexbox .flag > .body, .flexbox .flag > .image,
  .flexbox .flag > .body {
    width: auto; }
  .flexbox .media > .body, .flexbox .no-display-table .flag > .body, .no-display-table .flexbox .flag > .body, .flexbox .flag > .body {
    -webkit-box-flex: 1;
    -webkit-flex: 1;
    -ms-flex: 1;
    flex: 1; }
  .flexbox .media.reversed > .image, .flexbox .no-display-table .reversed.flag > .image, .no-display-table .flexbox .reversed.flag > .image, .flexbox .flag.reversed > .image {
    float: none;
    -webkit-box-ordinal-group: 2;
    -webkit-order: 1;
    -ms-flex-order: 1;
    order: 1; }
.flexbox .media, .flexbox .no-display-table .flag, .no-display-table .flexbox .flag {
  -webkit-box-align: start;
  -webkit-align-items: flex-start;
  -ms-flex-align: start;
  align-items: flex-start; }
.flexbox .flag {
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center; }
  .flexbox .flag.bottom {
    -webkit-box-align: end;
    -webkit-align-items: flex-end;
    -ms-flex-align: end;
    align-items: flex-end; }

html {
  font-size: 100%;
  height: 100%; }
  @media only screen and (min-width: 90.0625em) {
    html {
      font-size: 118.75%; } }

body, .sticky-footer-body {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column; }

.sticky-footer-body, .main {
  -webkit-box-flex: 1;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto; }

body {
  min-height: 100%; }

.sticky-footer-body {
  background-color: #666; }

body {
  border-top: 3px solid #b5d5ff; }

.header,
.footer {
  background-color: white;
  padding: 4px 8px 5px;
  padding: 0.25rem 0.5rem 0.3125rem; }

.logo-text {
  display: block;
  margin-left: 10px;
  margin-left: 0.625rem;
  color: #555; }

abbr.oslc-name {
  letter-spacing: 1px;
  border-bottom: 0 !important; }

.menu .item {
  background-color: white;
  padding: 8px 16px;
  padding: 0.5rem 1rem;
  border-bottom: 1px solid #ccc; }
.menu li.item {
  padding: 0; }
  .menu li.item > a {
    display: block;
    padding: 8px 16px;
    padding: 0.5rem 1rem;
    text-decoration: none;
    background-position: 100%; }
.menu .current a,
.menu .item a:hover,
.menu a.current,
.menu a.item:hover {
  background-color: #f1f1f1; }

.main {
  padding: 16px 8px;
  padding: 1rem 0.5rem;
  background-color: #f1f1f1; }

.card {
  background-color: white;
  max-width: 50em;
  border-top: 3px solid #63758c;
  -webkit-box-shadow: 1px 1px 0 #c1c1c1, 2px 2px 0 #c1c1c1, 3px 3px 0 #c1c1c1;
  box-shadow: 1px 1px 0 #c1c1c1, 2px 2px 0 #c1c1c1, 3px 3px 0 #c1c1c1; }
  .card > .header {
    background-color: #7e95b2;
    padding: 10px 16px 11px;
    padding: 0.625rem 1rem 0.6875rem;
    margin-bottom: 16px;
    margin-bottom: 1rem; }
    .card > .header > .title {
      margin: 0;
      color: #fff;
      line-height: 1.05; }
  .card > .content {
    padding: 8px 16px;
    padding: 0.5rem 1rem; }

.table, .copy > table {
  width: 100%;
  padding: 0;
  border-collapse: separate;
  border-spacing: 0;
  empty-cells: show;
  border: none;
  border-top: 2px solid #cccccc;
  background: #fff; }
  .ltie8 .table, .ltie8 .copy > table {
    border-collapse: collapse; }
  .table th, .copy > table th, .table td, .copy > table td {
    padding: 10px;
    text-align: left; }
  .table [align="right"], .copy > table [align="right"] {
    text-align: right; }
  .table [align="center"], .copy > table [align="center"] {
    text-align: center; }
  .table th, .copy > table th {
    font-weight: bold;
    vertical-align: bottom;
    background-color: #fafafa; }
  .table th + th, .copy > table th + th {
    border-left: 1px solid #cccccc; }
  .table td, .copy > table td {
    vertical-align: top; }
  .table tbody tr + tr td, .copy > table tbody tr + tr td {
    border-top: 1px solid #cccccc; }

/*
 * Body Copy
 */
.copy {
  line-height: 1.4375; }
  .copy > *:first-child {
    margin-top: 0; }
  .copy > *:last-child {
    margin-bottom: 0; }
  .copy > h1,
  .copy > h2,
  .copy > h3,
  .copy > h4,
  .copy > h5,
  .copy > h6 {
    font-weight: 500;
    margin-top: 1em;
    margin-bottom: 0.6em; }
    .copy > h1 > small,
    .copy > h2 > small,
    .copy > h3 > small,
    .copy > h4 > small,
    .copy > h5 > small,
    .copy > h6 > small {
      color: #777;
      vertical-align: baseline;
      font-size: 0.7071em; }
  .copy > h6 {
    line-height: 1.1875; }
  .copy > h5 {
    line-height: 1.21053; }
  .copy > h4 {
    line-height: 1.17391; }
  .copy > h3 {
    line-height: 1.18519; }
  .copy > h2 {
    line-height: 1.1875; }
  .copy > h1 {
    line-height: 1.26316; }
  .copy > .godzilla {
    line-height: 1.05; }
  .copy > ul,
  .copy > ol {
    padding-left: 24px;
    padding-left: 1.5rem; }
    .copy > ul ol, .copy > ul ul,
    .copy > ol ol,
    .copy > ol ul {
      padding-left: 24px;
      padding-left: 1.5rem; }
  .copy li {
    margin-bottom: 6px;
    margin-bottom: 0.375rem;
    margin-top: 6px;
    margin-top: 0.375rem; }
  .copy a {
    color: #004eb5; }

a {
  color: #333333; }
